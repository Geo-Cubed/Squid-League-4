@page "/admin/players"
@attribute [Authorize]
@using Microsoft.AspNetCore.Authorization;
@using GeoCubed.SquidLeague4.Website.Common.Helpers;
@using GeoCubed.SquidLeague4.Website.Models.Enums;

<div class="text-center">
    <h3>Players</h3>

    <div class="d-flex justify-content-end m-2">
        <button type="button" class="btn btn-primary" @onclick="OpenAddPlayer">
            <span class="oi oi-plus"></span> Add Player
        </button>
        <button class="btn btn-primary ml-2 mr-2 @((this.selectedPlayerId > 0) ? string.Empty : "disabled")" @onclick="(() => { if (this.selectedPlayerId > 0) OpenEditPlayer(); })">
            <span class="oi oi-pencil"></span> Edit Player
        </button>
        <button class="btn btn-primary @((this.selectedPlayerId > 0) ? string.Empty : "disabled")" @onclick="(() => { if (this.selectedPlayerId > 0) OpenDeletePlayer(); })">
            <span class="oi oi-trash"></span> Delete Player
        </button>
    </div>

    <div class="d-flex justify-content-center">
        <table class="table table-bordered table-hover">
            <caption>List of players</caption>
            <thead>
                <tr>
                    <th scope="col">Id</th>
                    <th scope="col">Name</th>
                    <th scope="col">SZ</th>
                    <th scope="col">TC</th>
                    <th scope="col">RM</th>
                    <th scope="col">CB</th>
                    <th scope="col">Team</th>
                    <th scope="col">Active</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var player in this.allPlayers.OrderBy(p => p.InGameName))
                {
                    <tr class="@((this.selectedPlayerId == player.Id) ? "table-secondary" : string.Empty)" @onclick="(() => { if (this.selectedPlayerId == player.Id) { OpenEditPlayer(); } else { this.selectedPlayerId = player.Id; } })">
                        <td scope="row">@player.Id</td>
                        <td>@player.InGameName</td>
                        <td>@player.SzRank</td>
                        <td>@player.TcRank</td>
                        <td>@player.RmRank</td>
                        <td>@player.CbRank</td>
                        <td>@this.allTeams.FirstOrDefault(t => t.Id == player.TeamId)?.TeamName</td>
                        <td>
                            @if (player.IsActive)
                            {
                                <span class="oi oi-check"></span>
                            }
                            else
                            {
                                <span class="oi oi-x"></span>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<Modal @ref="addModal">
    <Title>Add</Title>
    <Body>
        <form>
            <div class="form-group row">
                <label class="col-sm-2 col-form-label">Name</label>
                <div class="col-sm-10">
                    <input type="text" class="form-control" @bind-value="this.model.InGameName" placeholder="Player's switch name"/>
                </div>
            </div>
            <div class="form-group row">
                <label class="col-sm-2 col-form-label">Splat Zone</label>
                <div class="col-sm-10">
                    <select class="form-control" @bind="this.model.SzRank">
                        @foreach (Ranks rank in Enum.GetValues(typeof(Ranks)))
                        {
                            if (rank == Ranks.unknown)
                            {
                                <option value="@rank.GetDescription()" selected>@rank.GetDescription()</option>
                            }
                            else
                            {
                                <option value="@rank.GetDescription()">@rank.GetDescription()</option>
                            }
                        }
                    </select>
                </div>
            </div>
            <div class="form-group row">
                <label class="col-sm-2 col-form-label">Tower Control</label>
                <div class="col-sm-10">
                    <select class="form-control" @bind="this.model.TcRank">
                        @foreach (Ranks rank in Enum.GetValues(typeof(Ranks)))
                        {
                            if (rank == Ranks.unknown)
                            {
                                <option value="@rank.GetDescription()" selected>@rank.GetDescription()</option>
                            }
                            else
                            {
                                <option value="@rank.GetDescription()">@rank.GetDescription()</option>
                            }
                        }
                    </select>
                </div>
            </div>
            <div class="form-group row">
                <label class="col-sm-2 col-form-label">Rainmaker</label>
                <div class="col-sm-10">
                    <select class="form-control" @bind="this.model.RmRank">
                        @foreach (Ranks rank in Enum.GetValues(typeof(Ranks)))
                        {
                            if (rank == Ranks.unknown)
                            {
                                <option value="@rank.GetDescription()" selected>@rank.GetDescription()</option>
                            }
                            else
                            {
                                <option value="@rank.GetDescription()">@rank.GetDescription()</option>
                            }
                        }
                    </select>
                </div>
            </div>
            <div class="form-group row">
                <label class="col-sm-2 col-form-label">Clam Blitz</label>
                <div class="col-sm-10">
                    <select class="form-control" @bind="this.model.CbRank">
                        @foreach (Ranks rank in Enum.GetValues(typeof(Ranks)))
                        {
                            if (rank == Ranks.unknown)
                            {
                                <option value="@rank.GetDescription()" selected>@rank.GetDescription()</option>
                            }
                            else
                            {
                                <option value="@rank.GetDescription()">@rank.GetDescription()</option>
                            }
                        }
                    </select>
                </div>
            </div>
            <div class="form-group row">
                <label class="col-sm-2 col-form-label">Team</label>
                <div class="col-sm-10">
                    <select class="form-control" @bind="this.model.TeamId">
                        <option value="-1" selected>No Team</option>
                        @foreach (var team in this.allTeams.OrderBy(t => t.TeamName))
                        {
                            <option value="@team.Id">@team.TeamName</option>
                        }
                    </select>
                </div>
            </div>
            <div class="form-group row">
                <label class="col-sm-2 col-form-label">Is Active</label>
                <div class="col-sm-10">
                    <div class="form-check">
                        <input type="checkbox" class="form-check-input" @bind-value="this.model.IsActive" />
                    </div>
                </div>
            </div>
        </form>
    </Body>
    <Footer>
        <button type="button" class="btn btn-primary" @onclick="AddPlayer">Add</button>
        <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="(() => this.addModal.Close())">Cancel</button>
    </Footer>
</Modal>

<Modal @ref="editModal">
    <Title>Edit</Title>
    <Body>
        <form>
            <div class="form-group row">
                <label class="col-sm-2 col-form-label">Id</label>
                <div class="col-sm-10">
                    <input type="text" class="form-control" @bind-value="this.model.Id" readonly />
                </div>
            </div>
            <div class="form-group row">
                <label class="col-sm-2 col-form-label">Name</label>
                <div class="col-sm-10">
                    <input type="text" class="form-control" @bind-value="this.model.InGameName" placeholder="Player's switch name"/>
                </div>
            </div>
            <div class="form-group row">
                <label class="col-sm-2 col-form-label">Splat Zone</label>
                <div class="col-sm-10">
                    <select class="form-control" @bind="this.model.SzRank">
                        @foreach (Ranks rank in Enum.GetValues(typeof(Ranks)))
                        {
                            <option value="@rank.GetDescription()">@rank.GetDescription()</option>
                        }
                    </select>
                </div>
            </div>
            <div class="form-group row">
                <label class="col-sm-2 col-form-label">Tower Control</label>
                <div class="col-sm-10">
                    <select class="form-control" @bind="this.model.TcRank">
                        @foreach (Ranks rank in Enum.GetValues(typeof(Ranks)))
                        {
                            <option value="@rank.GetDescription()">@rank.GetDescription()</option>
                        }
                    </select>
                </div>
            </div>
            <div class="form-group row">
                <label class="col-sm-2 col-form-label">Rainmaker</label>
                <div class="col-sm-10">
                    <select class="form-control" @bind="this.model.RmRank">
                        @foreach (Ranks rank in Enum.GetValues(typeof(Ranks)))
                        {
                            <option value="@rank.GetDescription()">@rank.GetDescription()</option>
                        }
                    </select>
                </div>
            </div>
            <div class="form-group row">
                <label class="col-sm-2 col-form-label">Clam Blitz</label>
                <div class="col-sm-10">
                    <select class="form-control" @bind="this.model.CbRank">
                        @foreach (Ranks rank in Enum.GetValues(typeof(Ranks)))
                        {
                            <option value="@rank.GetDescription()">@rank.GetDescription()</option>
                        }
                    </select>
                </div>
            </div>
            <div class="form-group row">
                <label class="col-sm-2 col-form-label">Team</label>
                <div class="col-sm-10">
                    <select class="form-control" @bind="this.model.TeamId">
                        <option value="-1">No Team</option>
                        @foreach (var team in this.allTeams.OrderBy(t => t.TeamName))
                        {
                            <option value="@team.Id">@team.TeamName</option>
                        }
                    </select>
                </div>
            </div>
            <div class="form-group row">
                <label class="col-sm-2 col-form-label">Is Active</label>
                <div class="col-sm-10">
                    <div class="form-check">
                        <input type="checkbox" class="form-check-input" @bind-value="this.model.IsActive" />
                    </div>
                </div>
            </div>
        </form>
    </Body>
    <Footer>
        <button type="button" class="btn btn-primary" @onclick="EditPlayer">Save Changes</button>
        <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="(() => this.editModal.Close())">Cancel</button>
    </Footer>
</Modal>

<Modal @ref="deleteModal">
    <Title>Delete</Title>
    <Body>
        <span><em>@string.Format("Are you sure you want to delete '{0}'?", this.model.InGameName)</em></span>
        <h6 class="text-danger">@this.message</h6>
    </Body>
    <Footer>
        <button type="button" class="btn btn-danger" @onclick="DeletePlayer">Delete</button>
        <button type="button" class="btn btn-primary" data-dismiss="modal" @onclick="(() => this.deleteModal.Close())">Cancel</button>
    </Footer>
</Modal>