// <auto-generated />
using System;
using GeoCubed.SquidLeague4.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GeoCubed.SquidLeague4.Persistence.Migrations
{
    [DbContext(typeof(SquidLeagueDbContext))]
    partial class SquidLeagueDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.5");

            modelBuilder.Entity("GeoCubed.SquidLeague4.Domain.Entities.Audit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<string>("ChangeType")
                        .HasColumnType("enum('I','U','D')")
                        .HasColumnName("change_type");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("NewRow")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("new_row");

                    b.Property<string>("OldRow")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("old_row");

                    b.Property<string>("TableName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("table_name");

                    b.Property<string>("Username")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.ToTable("audit");
                });

            modelBuilder.Entity("GeoCubed.SquidLeague4.Domain.Entities.BracketKnockout", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("MatchId")
                        .HasColumnType("int(11)")
                        .HasColumnName("match_id");

                    b.Property<string>("Stage")
                        .IsRequired()
                        .HasColumnType("enum('Q1','Q2','Q3','Q4','S1','S2','F','T')")
                        .HasColumnName("stage");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "MatchId" }, "FK_bracket_knockout_match");

                    b.ToTable("bracket_knockout");
                });

            modelBuilder.Entity("GeoCubed.SquidLeague4.Domain.Entities.BracketSwiss", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("MatchId")
                        .HasColumnType("int(11)")
                        .HasColumnName("match_id");

                    b.Property<int>("MatchWeek")
                        .HasColumnType("int(11)")
                        .HasColumnName("match_week");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "MatchId" }, "FK_bracket_swiss_match");

                    b.ToTable("bracket_swiss");
                });

            modelBuilder.Entity("GeoCubed.SquidLeague4.Domain.Entities.CasterProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<string>("CasterName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("caster_name");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Discord")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("discord");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active")
                        .HasDefaultValueSql("'0'")
                        .HasComment("If the caster is active or not");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ProfilePicturePath")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("profile_picture_path");

                    b.Property<string>("Twitch")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("twitch");

                    b.Property<string>("Twitter")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("twitter");

                    b.Property<string>("YouTube")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("youtube");

                    b.HasKey("Id");

                    b.ToTable("caster_profile");
                });

            modelBuilder.Entity("GeoCubed.SquidLeague4.Domain.Entities.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<double>("AwayTeamScore")
                        .HasColumnType("double")
                        .HasColumnName("away_team_score");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("GameSettingId")
                        .HasColumnType("int(11)")
                        .HasColumnName("game_setting_id");

                    b.Property<double>("HomeTeamScore")
                        .HasColumnType("double")
                        .HasColumnName("home_team_score");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("MatchId")
                        .HasColumnType("int(11)")
                        .HasColumnName("match_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "MatchId" }, "FK_game_set_match");

                    b.HasIndex(new[] { "GameSettingId" }, "FK_game_setting");

                    b.ToTable("game");
                });

            modelBuilder.Entity("GeoCubed.SquidLeague4.Domain.Entities.GameMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("MapName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("map_name");

                    b.Property<string>("PicturePath")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("picture_path");

                    b.HasKey("Id");

                    b.ToTable("game_map");
                });

            modelBuilder.Entity("GeoCubed.SquidLeague4.Domain.Entities.GameMode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("mode_name");

                    b.Property<string>("PicturePath")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("picture_path");

                    b.HasKey("Id");

                    b.ToTable("game_mode");
                });

            modelBuilder.Entity("GeoCubed.SquidLeague4.Domain.Entities.GameSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<string>("BracketStage")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("bracket_stage");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("GameMapId")
                        .HasColumnType("int(11)")
                        .HasColumnName("game_map_id");

                    b.Property<int>("GameModeId")
                        .HasColumnType("int(11)")
                        .HasColumnName("game_mode_id");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int(11)")
                        .HasColumnName("sort_order");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "GameMapId" }, "FK_game_setting_game_map");

                    b.HasIndex(new[] { "GameModeId" }, "FK_game_setting_game_mode");

                    b.ToTable("game_setting");
                });

            modelBuilder.Entity("GeoCubed.SquidLeague4.Domain.Entities.HelpfulPerson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id")
                        .HasComment("Id of the helpful_people table");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("description")
                        .HasComment("Short description of what the person did to help");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ProfilePictureLink")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("profile_picture_link")
                        .HasComment("Link to the users selected profile picture");

                    b.Property<string>("TwitterLink")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("twitter_link")
                        .HasComment("Link to the users twitter account");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("user_name")
                        .HasComment("Name of the person");

                    b.HasKey("Id");

                    b.ToTable("helpful_people");

                    b
                        .HasComment("Used to store people who helped with the project so that I can add more people easily");
                });

            modelBuilder.Entity("GeoCubed.SquidLeague4.Domain.Entities.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<int>("AwayTeamId")
                        .HasColumnType("int(11)")
                        .HasColumnName("away_team_id");

                    b.Property<int?>("AwayTeamScore")
                        .HasColumnType("int(11)")
                        .HasColumnName("away_team_score")
                        .HasDefaultValueSql("'0'");

                    b.Property<int?>("CasterProfileId")
                        .HasColumnType("int(11)")
                        .HasColumnName("caster_profile_id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("HomeTeamId")
                        .HasColumnType("int(11)")
                        .HasColumnName("home_team_id");

                    b.Property<int?>("HomeTeamScore")
                        .HasColumnType("int(11)")
                        .HasColumnName("home_team_score")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("MatchDate")
                        .HasColumnType("datetime")
                        .HasColumnName("match_date");

                    b.Property<string>("MatchVodLink")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("match_vod_link");

                    b.Property<int?>("SecondaryCasterProfileId")
                        .HasColumnType("int(11)")
                        .HasColumnName("secondary_caster_profile_id")
                        .HasComment("Id of the secondary caster");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AwayTeamId" }, "FK_match_away_team");

                    b.HasIndex(new[] { "CasterProfileId" }, "FK_match_caster_profile");

                    b.HasIndex(new[] { "HomeTeamId" }, "FK_match_home_team");

                    b.HasIndex(new[] { "SecondaryCasterProfileId" }, "FK_match_second_caster_profile");

                    b.ToTable("match");
                });

            modelBuilder.Entity("GeoCubed.SquidLeague4.Domain.Entities.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<string>("CbRank")
                        .HasColumnType("enum('NA','UN','C-','C','C+','B-','B','B+','A-','A','A+','S','S+','X')")
                        .HasColumnName("cb_rank")
                        .HasDefaultValueSql("'NA'");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("InGameName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("in_game_name");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RmRank")
                        .HasColumnType("enum('NA','UN','C-','C','C+','B-','B','B+','A-','A','A+','S','S+','X')")
                        .HasColumnName("rm_rank")
                        .HasDefaultValueSql("'NA'");

                    b.Property<string>("SzRank")
                        .HasColumnType("enum('NA','UN','C-','C','C+','B-','B','B+','A-','A','A+','S','S+','X')")
                        .HasColumnName("sz_rank")
                        .HasDefaultValueSql("'NA'");

                    b.Property<string>("TcRank")
                        .HasColumnType("enum('NA','UN','C-','C','C+','B-','B','B+','A-','A','A+','S','S+','X')")
                        .HasColumnName("tc_rank")
                        .HasDefaultValueSql("'NA'");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int(11)")
                        .HasColumnName("team_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "TeamId" }, "FK_player_team");

                    b.ToTable("player");
                });

            modelBuilder.Entity("GeoCubed.SquidLeague4.Domain.Entities.SystemSwitch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id")
                        .HasComment("Id of the system switch");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("name")
                        .HasComment("Name of the setting");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("value")
                        .HasComment("Value for the setting");

                    b.HasKey("Id");

                    b.ToTable("system_switch");

                    b
                        .HasComment("Used to store settings for the squid league applications");
                });

            modelBuilder.Entity("GeoCubed.SquidLeague4.Domain.Entities.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("TeamName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("team_name");

                    b.HasKey("Id");

                    b.ToTable("team");
                });

            modelBuilder.Entity("GeoCubed.SquidLeague4.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsAdmin")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_admin");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("password_hash");

                    b.Property<int>("Username")
                        .HasColumnType("int(11)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.ToTable("user");
                });

            modelBuilder.Entity("GeoCubed.SquidLeague4.Domain.Entities.Weapon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PicturePath")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("picture_path");

                    b.Property<int>("SpecialId")
                        .HasColumnType("int(11)")
                        .HasColumnName("special_id");

                    b.Property<int>("SubId")
                        .HasColumnType("int(11)")
                        .HasColumnName("sub_id");

                    b.Property<string>("WeaponName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("weapon_name");

                    b.Property<string>("WeaponRole")
                        .HasColumnType("enum('Anchor','Frontline','Support','Midline')")
                        .HasColumnName("weapon_role");

                    b.Property<string>("WeaponType")
                        .HasColumnType("enum('Shooter','Blaster','Roller','Brush','Charger','Slosher','Splatling','Dualie','Brella')")
                        .HasColumnName("weapon_type");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "SpecialId" }, "FK_weapon_special");

                    b.HasIndex(new[] { "SubId" }, "FK_weapon_sub");

                    b.ToTable("weapon");
                });

            modelBuilder.Entity("GeoCubed.SquidLeague4.Domain.Entities.WeaponPlayed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("GameId")
                        .HasColumnType("int(11)")
                        .HasColumnName("game_id");

                    b.Property<bool>("IsHomeTeam")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_home_team");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int(11)")
                        .HasColumnName("player_id");

                    b.Property<int>("WeaponId")
                        .HasColumnType("int(11)")
                        .HasColumnName("weapon_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "PlayerId" }, "FK_weapon_played_player");

                    b.HasIndex(new[] { "WeaponId" }, "FK_weapon_played_weapon");

                    b.HasIndex(new[] { "GameId" }, "FK_wepaon_played_game");

                    b.ToTable("weapon_played");
                });

            modelBuilder.Entity("GeoCubed.SquidLeague4.Domain.Entities.WeaponSpecial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PicturePath")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("picture_path");

                    b.Property<string>("SpecialName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("special_name");

                    b.HasKey("Id");

                    b.ToTable("weapon_special");
                });

            modelBuilder.Entity("GeoCubed.SquidLeague4.Domain.Entities.WeaponSub", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PicturePath")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("picture_path");

                    b.Property<string>("SubName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("sub_name");

                    b.HasKey("Id");

                    b.ToTable("weapon_sub");
                });

            modelBuilder.Entity("GeoCubed.SquidLeague4.Domain.Entities.BracketKnockout", b =>
                {
                    b.HasOne("GeoCubed.SquidLeague4.Domain.Entities.Match", "Match")
                        .WithMany("BracketKnockouts")
                        .HasForeignKey("MatchId")
                        .HasConstraintName("FK_bracket_knockout_match")
                        .IsRequired();

                    b.Navigation("Match");
                });

            modelBuilder.Entity("GeoCubed.SquidLeague4.Domain.Entities.BracketSwiss", b =>
                {
                    b.HasOne("GeoCubed.SquidLeague4.Domain.Entities.Match", "Match")
                        .WithMany("BracketSwisses")
                        .HasForeignKey("MatchId")
                        .HasConstraintName("FK_bracket_swiss_match")
                        .IsRequired();

                    b.Navigation("Match");
                });

            modelBuilder.Entity("GeoCubed.SquidLeague4.Domain.Entities.Game", b =>
                {
                    b.HasOne("GeoCubed.SquidLeague4.Domain.Entities.GameSetting", "GameSetting")
                        .WithMany("Games")
                        .HasForeignKey("GameSettingId")
                        .HasConstraintName("FK_game_setting")
                        .IsRequired();

                    b.HasOne("GeoCubed.SquidLeague4.Domain.Entities.Match", "Match")
                        .WithMany("Games")
                        .HasForeignKey("MatchId")
                        .HasConstraintName("FK_game_set_match")
                        .IsRequired();

                    b.Navigation("GameSetting");

                    b.Navigation("Match");
                });

            modelBuilder.Entity("GeoCubed.SquidLeague4.Domain.Entities.GameSetting", b =>
                {
                    b.HasOne("GeoCubed.SquidLeague4.Domain.Entities.GameMap", "GameMap")
                        .WithMany("GameSettings")
                        .HasForeignKey("GameMapId")
                        .HasConstraintName("FK_game_setting_game_map")
                        .IsRequired();

                    b.HasOne("GeoCubed.SquidLeague4.Domain.Entities.GameMode", "GameMode")
                        .WithMany("GameSettings")
                        .HasForeignKey("GameModeId")
                        .HasConstraintName("FK_game_setting_game_mode")
                        .IsRequired();

                    b.Navigation("GameMap");

                    b.Navigation("GameMode");
                });

            modelBuilder.Entity("GeoCubed.SquidLeague4.Domain.Entities.Match", b =>
                {
                    b.HasOne("GeoCubed.SquidLeague4.Domain.Entities.Team", "AwayTeam")
                        .WithMany("MatchAwayTeams")
                        .HasForeignKey("AwayTeamId")
                        .HasConstraintName("FK_match_away_team")
                        .IsRequired();

                    b.HasOne("GeoCubed.SquidLeague4.Domain.Entities.CasterProfile", "CasterProfile")
                        .WithMany("MatchCasterProfiles")
                        .HasForeignKey("CasterProfileId")
                        .HasConstraintName("FK_match_caster_profile");

                    b.HasOne("GeoCubed.SquidLeague4.Domain.Entities.Team", "HomeTeam")
                        .WithMany("MatchHomeTeams")
                        .HasForeignKey("HomeTeamId")
                        .HasConstraintName("FK_match_home_team")
                        .IsRequired();

                    b.HasOne("GeoCubed.SquidLeague4.Domain.Entities.CasterProfile", "SecondaryCasterProfile")
                        .WithMany("MatchSecondaryCasterProfiles")
                        .HasForeignKey("SecondaryCasterProfileId")
                        .HasConstraintName("FK_match_second_caster_profile");

                    b.Navigation("AwayTeam");

                    b.Navigation("CasterProfile");

                    b.Navigation("HomeTeam");

                    b.Navigation("SecondaryCasterProfile");
                });

            modelBuilder.Entity("GeoCubed.SquidLeague4.Domain.Entities.Player", b =>
                {
                    b.HasOne("GeoCubed.SquidLeague4.Domain.Entities.Team", "Team")
                        .WithMany("Players")
                        .HasForeignKey("TeamId")
                        .HasConstraintName("FK_player_team");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("GeoCubed.SquidLeague4.Domain.Entities.Weapon", b =>
                {
                    b.HasOne("GeoCubed.SquidLeague4.Domain.Entities.WeaponSpecial", "WeaponSpecial")
                        .WithMany("Weapons")
                        .HasForeignKey("SpecialId")
                        .HasConstraintName("FK_weapon_special")
                        .IsRequired();

                    b.HasOne("GeoCubed.SquidLeague4.Domain.Entities.WeaponSub", "WeaponSub")
                        .WithMany("Weapons")
                        .HasForeignKey("SubId")
                        .HasConstraintName("FK_weapon_sub")
                        .IsRequired();

                    b.Navigation("WeaponSpecial");

                    b.Navigation("WeaponSub");
                });

            modelBuilder.Entity("GeoCubed.SquidLeague4.Domain.Entities.WeaponPlayed", b =>
                {
                    b.HasOne("GeoCubed.SquidLeague4.Domain.Entities.Game", "Game")
                        .WithMany("WeaponPlayeds")
                        .HasForeignKey("GameId")
                        .HasConstraintName("FK_wepaon_played_game")
                        .IsRequired();

                    b.HasOne("GeoCubed.SquidLeague4.Domain.Entities.Player", "Player")
                        .WithMany("WeaponPlayeds")
                        .HasForeignKey("PlayerId")
                        .HasConstraintName("FK_weapon_played_player")
                        .IsRequired();

                    b.HasOne("GeoCubed.SquidLeague4.Domain.Entities.Weapon", "Weapon")
                        .WithMany("WeaponPlayeds")
                        .HasForeignKey("WeaponId")
                        .HasConstraintName("FK_weapon_played_weapon")
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Player");

                    b.Navigation("Weapon");
                });

            modelBuilder.Entity("GeoCubed.SquidLeague4.Domain.Entities.CasterProfile", b =>
                {
                    b.Navigation("MatchCasterProfiles");

                    b.Navigation("MatchSecondaryCasterProfiles");
                });

            modelBuilder.Entity("GeoCubed.SquidLeague4.Domain.Entities.Game", b =>
                {
                    b.Navigation("WeaponPlayeds");
                });

            modelBuilder.Entity("GeoCubed.SquidLeague4.Domain.Entities.GameMap", b =>
                {
                    b.Navigation("GameSettings");
                });

            modelBuilder.Entity("GeoCubed.SquidLeague4.Domain.Entities.GameMode", b =>
                {
                    b.Navigation("GameSettings");
                });

            modelBuilder.Entity("GeoCubed.SquidLeague4.Domain.Entities.GameSetting", b =>
                {
                    b.Navigation("Games");
                });

            modelBuilder.Entity("GeoCubed.SquidLeague4.Domain.Entities.Match", b =>
                {
                    b.Navigation("BracketKnockouts");

                    b.Navigation("BracketSwisses");

                    b.Navigation("Games");
                });

            modelBuilder.Entity("GeoCubed.SquidLeague4.Domain.Entities.Player", b =>
                {
                    b.Navigation("WeaponPlayeds");
                });

            modelBuilder.Entity("GeoCubed.SquidLeague4.Domain.Entities.Team", b =>
                {
                    b.Navigation("MatchAwayTeams");

                    b.Navigation("MatchHomeTeams");

                    b.Navigation("Players");
                });

            modelBuilder.Entity("GeoCubed.SquidLeague4.Domain.Entities.Weapon", b =>
                {
                    b.Navigation("WeaponPlayeds");
                });

            modelBuilder.Entity("GeoCubed.SquidLeague4.Domain.Entities.WeaponSpecial", b =>
                {
                    b.Navigation("Weapons");
                });

            modelBuilder.Entity("GeoCubed.SquidLeague4.Domain.Entities.WeaponSub", b =>
                {
                    b.Navigation("Weapons");
                });
#pragma warning restore 612, 618
        }
    }
}
