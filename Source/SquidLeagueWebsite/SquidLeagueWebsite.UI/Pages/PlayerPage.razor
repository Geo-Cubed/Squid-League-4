@page "/players"

@using SquidLeagueWebsite.Models
@using SquidLeagueWebsite.UI.Data
@inject PlayerService playerService

@*<PageTitle Title="Squid League - Players"></PageTitle>*@

<div id="title">Players</div>
<div class="playerSelectBox">
    <select @onchange="OnPlayerSelect">
        @if (this.selectedPlayer == null)
        {
            <option value="0">Select Player:</option>
        }

        @foreach (var tPlayer in players)
        {
            <option value=@string.Format("{0}", tPlayer.Id)>@string.Format("{0}{1}", tPlayer.InGameName, (tPlayer.TeamName == "No Team") ? string.Empty : " - " + tPlayer.TeamName)</option>
        }
    </select>
</div>

@if (selectedPlayer == null)
{
    <div class="player">
        <div class="playerCard">
            <h3>No Player Selected</h3>
        </div>
    </div>
}
else
{
    <div class="player">
        <div class="playerCard">
            <h1>@selectedPlayer.InGameName</h1>
            <h2>@selectedPlayer.TeamName</h2>
            <h3>Ranks</h3>
            <p>SZ: <b>@selectedPlayer.SzRank</b> RM: <b>@selectedPlayer.RmRank</b></p>
            <p>TC: <b>@selectedPlayer.TcRank</b> CB: <b>@selectedPlayer.CbRank</b></p>
            <h3>Role</h3>
            <p>@selectedPlayer.Role</p>
            <h3>Weapons</h3>
            <p>
                <img src="@selectedPlayer.Weapon1Path" height="50px" width="50px">
                <img src="@selectedPlayer.Weapon2Path" height="50px" width="50px">
                <img src="@selectedPlayer.Weapon3Path" heigth=50px width=50px>
            </p>
        </div>
    </div>

    <div id="recent">
        <h2>Recent Games</h2>
    </div>

    @if (matches == null)
    {
        <div class="textContent">
            <h3>Loading...</h3>
        </div>
    }
    else if (matches.Count() == 0)
    {
        <div class="textContent">
            <h3>@string.Format("{0} has not played any matches yet", selectedPlayer.InGameName)</h3>
        </div>
    }
    else
    {
        <div id="matches">
            @foreach (var match in matches)
            {
                <div class="match">
                    <div class="playerCard">
                        <img src="@match.WeaponPath" title="@match.WeaponName" height="50px" width="50px">
                        <img src="@match.ModePath" title="@match.ModeName" height="50px" width="50px">
                        <img src="@match.MapPath" title="@match.MapName" heght="50px" width="100px">
                        <p><b>@match.PlayerTeam</b>@string.Format(" {0} - {1} {2}", match.PlayerTeamScore, match.EnemyTeamScore, match.EnemyTeam)</p>
                    </div>
                </div>
            }
        </div>
    }
}

@code {
    private int id;

    public Player selectedPlayer
    {
        get 
        {
            return this.players.Where(p => p.Id == this.id).FirstOrDefault();
        }
    }

    private IEnumerable<Player> players;

    private IEnumerable<PlayerMatch> matches;

    protected override async Task OnInitializedAsync()
    {
        this.id = 0;
        this.players = playerService.GetAllPlayers();
    }

    protected void OnPlayerSelect(ChangeEventArgs e)
    {
        this.matches = null;
        this.id = int.Parse(e.Value.ToString());
        //TODO: Load the players matches.
    }
}