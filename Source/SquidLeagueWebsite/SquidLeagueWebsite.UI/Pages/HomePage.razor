@page "/"
@page "/home"

@using SquidLeagueWebsite.Utilities
@using SquidLeagueWebsite.UI.Data
@inject HomeService homeService

@*<PageTitle Title="Squid League - Home"></PageTitle>*@

<div id="title">Squid League 4 Viewer</div>
<div class="textContent">
    <h2>Upcomming Matches</h2>
</div>
@if (Matches.IsNull())
{
    <div class="textContent"><p><em>Loading...</em></p></div>
}
else if (Matches.Count() == 0)
{
    <div class="textContent"><p><h3>There are no matches scheduled yet for this week</h3></p></div>
}
else
{
    foreach (var dayOfMatches in Matches.Where(y => y.MatchDate != null).GroupBy(x => ((DateTime)x.MatchDate).ToShortDateString()))
    {
        <center><h3>@string.Format("{0}", ((DateTime)dayOfMatches.ElementAt(0).MatchDate).ToShortDateString())</h3></center>
        foreach (var match in dayOfMatches)
        {
            <div class="upcommingMatchCardContainer">
                <div class="upcommingMatchCard">
                    <h4>@string.Format("{0} vs. {1}", match.HomeTeam, match.AwayTeam)</h4>
                    <p>@string.Format("{0} GMT on", ((DateTime)match.MatchDate).ToLocalTime().ToShortTimeString())</p>
                    <a href=@string.Format("{0}", match.MatchVodLink) target="_blank">
                        <img src=@string.Format("Images/brandLogos/{0}.svg", match.MatchVodType) height=40px width=40px>
                    </a>
                </div>
            </div>
        }
    }
}

@code {
    private IEnumerable<Match> Matches;

    protected override async Task OnInitializedAsync()
    {
        Matches = new List<Match>() {
            new Match() { HomeTeam = "Broken", AwayTeam = "Mess", MatchDate = null, MatchVodLink = "https://twitch.tv/spid1", MatchVodType="twitch" },
            new Match() { HomeTeam = "Ducklings", AwayTeam = "Some Randos", MatchDate = DateTime.UtcNow, MatchVodLink = "https://twitch.tv/spid1", MatchVodType = "twitch" },
            new Match() { HomeTeam = "Ducklings", AwayTeam = "Some Randos", MatchDate = DateTime.UtcNow, MatchVodLink = "https://twitch.tv/spid1", MatchVodType = "twitch" },
            new Match() { HomeTeam = "Ducklings", AwayTeam = "Some Randos", MatchDate = DateTime.UtcNow.AddDays(1), MatchVodLink = "https://twitch.tv/spid1", MatchVodType = "twitch" },
            new Match() { HomeTeam = "Ducklings", AwayTeam = "Some Randos", MatchDate = DateTime.UtcNow.AddDays(1), MatchVodLink = "https://twitch.tv/spid1", MatchVodType = "twitch" },
            new Match() { HomeTeam = "Ducklings", AwayTeam = "Some Randos", MatchDate = DateTime.UtcNow.AddDays(2), MatchVodLink = "https://twitch.tv/spid1", MatchVodType = "twitch" },
            new Match() { HomeTeam = "Ducklings", AwayTeam = "Some Randos", MatchDate = DateTime.UtcNow.AddDays(4), MatchVodLink = "https://twitch.tv/spid1", MatchVodType = "twitch" },
            new Match() { HomeTeam = "Ducklings", AwayTeam = "Some Randos", MatchDate = DateTime.UtcNow.AddDays(4), MatchVodLink = "https://twitch.tv/spid1", MatchVodType = "twitch" }
        };
        return;
        //TODO: Load recent matches.
        Matches = homeService.GetUpcommingMatches();
    }
}
